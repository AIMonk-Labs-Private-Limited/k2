/**
 * @brief
 * This file contains information for building k2, which is helpful
 * for describing the environment in which k2 is used when creating
 * an issue on GitHub.
 *
 * @copyright
 * Copyright (c)  2020  Mobvoi Inc.        (authors: Fangjun Kuang)
 *
 * @copyright
 * See LICENSE for clarification regarding multiple authors
 *
 * @caution
 * This file is auto-generated by CMake. Do NOT edit!
 * You can find it at build_dir/k2/csrc/version.h
 */

#ifndef K2_CSRC_VERSION_H_
#define K2_CSRC_VERSION_H_

namespace k2 {

// Version of k2 in "major.minor.patch" format
static constexpr const char *kVersion = "1.24.3";

// The commit used to build k2
static constexpr const char *kGitSha1 = "";

// Date of the commit used to build k2
static constexpr const char *kGitDate = "";

// Version of CUDA used to build k2.
// Its format is "major.minor", e.g., 10.1
static constexpr const char *kCudaVersion = "11.6";

// cuDNN version, e.g., 8.0.2
static constexpr const char *kCudnnVersion = "8.4.0";

// clang-format off
// Version of Python used to build k2 Python bindings.
static constexpr const char *kPythonVersion = "3.8";

// clang-format on

// CMake build type, e.g., Release or Debug.
static constexpr const char *kBuildType = "Release";

// The operating system that is used to build k2, e.g., Ubuntu 16.04 LTS
static constexpr const char *kOS = R"os()os";

// e.g., 3.18.0
static constexpr const char *kCMakeVersion = "3.22.1";

// Version of the compiler, e.g., 5.4.0
static constexpr const char *kGCCVersion = "7.5.0";

// CUDA flags used to compile k2
static constexpr const char *kCMakeCudaFlags = R"cuda_flags( -Wno-deprecated-gpu-targets   -lineinfo --expt-extended-lambda -use_fast_math -Xptxas=-w  --expt-extended-lambda -gencode arch=compute_86,code=sm_86 -DONNX_NAMESPACE=onnx_c2 -gencode arch=compute_86,code=sm_86 -Xcudafe --diag_suppress=cc_clobber_ignored,--diag_suppress=integer_sign_change,--diag_suppress=useless_using_declaration,--diag_suppress=set_but_not_used,--diag_suppress=field_without_dll_interface,--diag_suppress=base_class_has_different_dll_interface,--diag_suppress=dll_interface_conflict_none_assumed,--diag_suppress=dll_interface_conflict_dllexport_assumed,--diag_suppress=implicit_return_from_non_void_function,--diag_suppress=unsigned_compare_with_zero,--diag_suppress=declared_but_not_referenced,--diag_suppress=bad_friend_decl --expt-relaxed-constexpr --expt-extended-lambda -D_GLIBCXX_USE_CXX11_ABI=0 --compiler-options -Wall  --compiler-options -Wno-strict-overflow  --compiler-options -Wno-unknown-pragmas )cuda_flags";

// CXX flags used to compile k2
static constexpr const char *kCMakeCxxFlags = R"cxx_flags( -D_GLIBCXX_USE_CXX11_ABI=0 -Wno-unused-variable  -Wno-strict-overflow )cxx_flags";

// Which PyTorch version k2 is using, e.g., 1.6.0+cu101
static constexpr const char *kTorchVersion = "1.13.1+cu116";

// Which CUDA version PyTorch is using, e.g., 10.1
static constexpr const char *kTorchCudaVersion = "11.6";

#ifndef K2_WITH_CUDA
#define K2_WITH_CUDA
#endif

#ifdef K2_WITH_CUDA
  static constexpr bool kWithCuda = true;
#else
  static constexpr bool kWithCuda = false;
#endif

// Indicate whether NVTX is enabled or not
#ifndef K2_ENABLE_NVTX
#define K2_ENABLE_NVTX
#endif

#ifdef K2_ENABLE_NVTX
static constexpr bool kEnableNvtx = true;
#else
static constexpr bool kEnableNvtx = false;
#endif
}  // namespace k2

#endif  //  K2_CSRC_VERSION_H_
